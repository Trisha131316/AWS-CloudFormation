Problem Statement:
You work for XYZ Corporation. Your corporation wants to launch a new
web-based application. The development team has prepared the code but it is
not tested yet. The development team needs the system admins to build a web
server to test the code but the system admins are not available.
Tasks To Be Performed:
1. Web tier: Launch an instance in a public subnet and that instance should
allow HTTP and SSH from the internet.
2. Application tier: Launch an instance in a private subnet of the web tier and
it should allow only SSH from the public subnet of Web Tier-3.
3. DB tier: Launch an RDS MYSQL instance in a private subnet and it should
allow connection on port 3306 only from the private subnet of Application
Tier-4.
4. Setup a Route 53 hosted zone and direct traffic to the EC2 instance.
You have been also asked to propose a solution so that:
1. Development team can test their code without having to involve the system
admins and can invest their time in testing the code rather than
provisioning, configuring and updating the resources needed to test the
code.
2. Make sure when the development team deletes the stack, RDS DB
instances should not be deleted.

Solution:

AWSTemplatFormatVersion: 2010-09-09
Parameters:
    KeyName:
     Type:'AWS::EC2::Keypair::KeyName'
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 145.50.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: 'Name'
          Value: 'My VPC'
  Subnet-Public:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 145.50.0.0/18
      Tags:
        - Key: 'Name'
          Value: 'Web-Tier'
  Subnet-Private1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 145.50.64.0/18
      Tags:
        - Key: 'Name'
          Value: 'App-Tier'
  Subnet-Private2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 145.50.128.0/18
      Tags:
        - Key: 'Name'
          Value: 'DB-Tier'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: 'IGW'
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTable-Public:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: 'RouteTb-Web'
  RouteTable-Private1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: 'RouteTb-App'
  RouteTable-Private2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: 'RouteTb-DB'
  SubnetRouteTableAssociationPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTable-Public
      SubnetId: !Ref Subnet-Public
  InternetGatewayRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTable-Public
      InternetGatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0
  SubnetRouteTableAssociationPrivate1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTable-Private1
      SubnetId: !Ref Subnet-Private1
  SubnetRouteTableAssociationPrivate2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTable-Private2
      SubnetId: !Ref Subnet-Private2
  SGPublic:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: Public Security Group
      GroupDescription: Security group for SNS VPC endpoing tutorial
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0                                            
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
  SGPrivate1:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      SecurityGroupIngress:
        - IpProtocol: '-1'
        - CidrIp: 145.50.64.0/18
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:    
        - IpProtocol: '-1'           
          CidrIp: 0.0.0.0/0
  SGPrivate2:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      SecurityGroupIngress:
        - IpProtocol: '-1' #App tier ip address
          CidrIp: 145.50.64.0/18
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:    
        - IpProtocol: '-1'           
          CidrIp: 0.0.0.0/0        
  Web-EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      KeyName: !Ref KeyName
      VpcId: !Ref VPC
      AMI: ami-0e1bed4f06a3b463d
      InstanceType: t2.micro
      NetworkInterfaces:
        DeviceIndex: '0'
        GroupSet:
          - !Ref SGPublic 
        SubnetId: !Ref Subnet-Public
      Tags:
        - Key: 'Name'
          Value: 'web-Instance'  
  Private1-EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      KeyName: !Ref KeyName
      VpcId: !Ref VPC
      ImageId: ami-0e1bed4f06a3b463d
      InstanceType: t2.micro
      NetworkInterfaces:
        DeviceIndex: '0'
        GroupSet:
          - !Ref SGPrivate1 
        SubnetId: !Ref  Subnet-Private1
      Tags:
        - Key: 'Name'
          Value: 'App-Instance'  
  MyDB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBSecurityGroups:
        - !Ref SGPrivate2
      DBInstanceClass: db.t2.small
      Engine: MySQL
      MasterUsername: Trisha
      ManageMasterUserPassword: true
      DeletionPolicy: Enable 
      Tags:
        - Key: 'Name'
          Value: 'DB-Instance'    

